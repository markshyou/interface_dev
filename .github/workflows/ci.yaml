name: CI

on:
  push:
    branches:
      - main

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, order, store, user]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Configure Docker credential helper
        run: |
          echo '{"credHelpers": {"aws": "ecr-login"}}' > $HOME/.docker/config.json

      - name: Build and tag Docker image
        run: |
          cd ${{ matrix.service }}
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-8)
          docker build -t interface_app/${{ matrix.service }}:${IMAGE_TAG} .
          docker tag interface_app/${{ matrix.service }}:${IMAGE_TAG} interface_app/${{ matrix.service }}:latest
          docker tag interface_app/${{ matrix.service }}:${IMAGE_TAG} 480936841767.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/interface_app/${{ matrix.service }}:${IMAGE_TAG}
          docker tag interface_app/${{ matrix.service }}:${IMAGE_TAG} 480936841767.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/interface_app/${{ matrix.service }}:latest

      - name: Push Docker image to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: 480936841767
        run: |
          # AWS CLI를 사용하여 ECR에 도커 이미지 푸시
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

          # 현재 서비스 이미지를 푸시
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/interface_app/${{ matrix.service }}:latest

          # 모든 서비스가 빌드 및 푸시를 완료한 후에 다음 서비스로 넘어가도록 스크립트 작성
          if [[ "${{ matrix.service }}" == "frontend" ]]; then
            echo "All services have been built and pushed, continuing with the next steps."
          else
            # frontend 서비스가 아니라면, 빌드 및 푸시를 완료할 때까지 대기
            echo "Waiting for all services to complete their builds and pushes..."
            while true; do
              sleep 30
              echo "Checking if frontend service has completed..."
              # frontend 서비스의 이미지가 ECR에 있는지 확인
              if [[ "$(aws ecr describe-images --repository-name interface_app/frontend --query 'imageDetails' | jq 'length')" -gt 0 ]]; then
                echo "Frontend service has completed its build and push, continuing with the next steps."
                break
              fi
            done
          fi


